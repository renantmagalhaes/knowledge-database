apiVersion: v1
kind: Service
metadata:
  name: example-analytics-ui
  namespace: "prod"
 # annotations:
 #   #service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:eu-central-1:0000000000:certificate/f24f24f2-984525245a1-245245-245245-2452452
  labels:
    name: example-analytics-ui
    app: app-name
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  selector:
    svc: example-analytics-ui
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-analytics-ui
  namespace: "prod"
  labels:
    app: app-name
    keel.sh/policy: all
    keel.sh/trigger: poll
    keel.sh/approvals: "1"
spec:
  selector:
    matchLabels:
      app: app-name
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: app-name
        svc: example-analytics-ui
    spec:
      volumes:
        - name: example-ai-production
          persistentVolumeClaim:
            claimName: efs-example
      containers:
        - name: example-analytics-ui
          image: 0000000000000.dkr.ecr.eu-central-1.amazonaws.com/example-analytics-ui:0.0.81
          ports:
            - containerPort: 3000
          #lifecycle:
          #  postStart:
          #    exec:
          #      command: ["sh", "-c", "/root/script.sh"]
          env:
            - name: REACT_APP_API_BASE_URL
              value: "https://www.exampleanalytics.com/example/api"
            - name: SKIP_PREFLIGHT_CHECK
              value: "true"
            - name: REACT_APP_SOCKETIO_URL
              value: "https://prod-echo-server.exampleanalytics.com:6001"
            - name: NODE_ENV
              value: production
            - name: REACT_APP_NODE_ENV
              value: production
            - name: PRODUCTION
              value: "True"
            - name: REACT_APP_SOCKETIO_CHANNEL_PREFIX
              value: example_analytics
          volumeMounts:
            - name: example-ai-production
              mountPath: "/data/RobotGltf"
              subPath: RobotGltf
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8080
            initialDelaySeconds: 130
            timeoutSeconds: 10
            failureThreshold: 10          
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1024Mi"
              cpu: "500m"
---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: example-analytics-ui
#  annotations:
#    kubernetes.io/ingress.class: "nginx"
#    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#    nginx.ingress.kubernetes.io/proxy-body-size: 10m
#spec:
#  rules:
#  #- host: cloud-prod.app-name.ai
#  - host: 
#    http:
#      paths:
#      - backend:
#          serviceName: example-analytics-ui
#          servicePort: 3000
#        path: /
